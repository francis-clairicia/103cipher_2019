#! /bin/python3
# -*- coding: Utf-8 -*
##
## EPITECH PROJECT, 2019
## 103cipher_2019
## File description:
## 103cipher
##

import sys
import math
from matrix import Matrix
from cryptage import encrypt, decrypt

def print_usage(error):
    print("USAGE")
    print("\t" + "./103cipher message key flag" + "\n")
    print("DESCRIPTION")
    print("\t" + "message" + "\t" + "a message, made of ASCII characters")
    print("\t" + "key" + "\t" + "the encryption key, made of ASCII characters")
    print("\t" + "flag" + "\t" + "0 for the message to be encrypted, 1 to be decrypted")
    sys.exit(84 * error)

def generate_key_matrix(key, flag):
    n = math.ceil(math.sqrt(len(key)))
    key_matrix = Matrix(n, n)
    for letter, coord in zip(key, key_matrix.coords()):
        key_matrix[coord] = ord(letter)
    if key_matrix.determinant == 0:
        print("Invalid key")
        sys.exit(84)
    if flag == 1:
        key_matrix = key_matrix.invert()
    return key_matrix

def generate_message_matrix(message, key_matrix, flag):
    message = message.split() if flag == 1 else message
    n = math.ceil(len(message) / key_matrix.lines)
    message_matrix = Matrix(n, key_matrix.lines)
    try:
        for element, coord in zip(message, message_matrix.coords()):
            message_matrix[coord] = ord(element) if flag == 0 else int(element)
    except ValueError:
        sys.exit(84)
    return message_matrix

def main(argc, argv):
    if argc != 4:
        print_usage(not (argc == 2 and argv[1] == "-h"))
    if argv[3] not in ["0", "1"]:
        sys.exit(84)
    flag = int(argv[3])
    key_matrix = generate_key_matrix(argv[2], flag)
    message_matrix = generate_message_matrix(argv[1], key_matrix, flag)
    output = [encrypt, decrypt][flag](key_matrix, message_matrix)
    print("Key matrix:", key_matrix, "", sep='\n')
    print("{} message:".format(["Encrypted", "Decrypted"][flag]))
    print(output)

if __name__ == "__main__":
    main(len(sys.argv), sys.argv)
